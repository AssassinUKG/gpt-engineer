Sure, here's the architecture for a Python GUI app for the game of naughts and crosses:

## Core Classes, Functions, and Methods

### Classes

1. `Game`: Represents the game of naughts and crosses. Contains methods for starting a new game, making a move, checking for a winner, and resetting the game.
2. `Player`: Represents a player in the game. Contains a name and a symbol (either "X" or "O").
3. `Board`: Represents the game board. Contains methods for displaying the board and updating it with new moves.
4. `GUI`: Represents the graphical user interface for the game. Contains methods for displaying the game board, getting user input, and updating the board with new moves.

### Functions

1. `main`: The entry point for the application. Initializes the game and GUI objects, and starts the game loop.

### Methods

1. `Game.start`: Starts a new game by initializing the players and board.
2. `Game.make_move`: Makes a move on the board for the current player.
3. `Game.check_winner`: Checks if there is a winner on the board.
4. `Game.reset`: Resets the game by clearing the board and starting a new game.
5. `Player.__init__`: Initializes a new player with a name and symbol.
6. `Board.__init__`: Initializes a new board with an empty grid.
7. `Board.display`: Displays the current state of the board.
8. `Board.update`: Updates the board with a new move.
9. `GUI.__init__`: Initializes the GUI window and widgets.
10. `GUI.display_board`: Displays the current state of the board in the GUI.
11. `GUI.get_input`: Gets user input from the GUI.
12. `GUI.update_board`: Updates the board with a new move in the GUI.

## File Content

1. main.py
```python
from game import Game
from gui import GUI

def main():
    game = Game()
    gui = GUI(game)
    gui.run()

if __name__ == "__main__":
    main()
```

2. game.py
```python
from player import Player
from board import Board

class Game:
    def __init__(self):
        self.players = [Player("Player 1", "X"), Player("Player 2", "O")]
        self.board = Board()
        self.current_player = self.players[0]

    def start(self):
        self.board.clear()
        self.current_player = self.players[0]

    def make_move(self, row, col):
        self.board.update(row, col, self.current_player.symbol)
        winner = self.check_winner()
        if winner:
            return winner
        self.current_player = self.players[1] if self.current_player == self.players[0] else self.players[0]
        return None

    def check_winner(self):
        for i in range(3):
            if self.board.grid[i][0] == self.board.grid[i][1] == self.board.grid[i][2] != " ":
                return self.current_player
            if self.board.grid[0][i] == self.board.grid[1][i] == self.board.grid[2][i] != " ":
                return self.current_player
        if self.board.grid[0][0] == self.board.grid[1][1] == self.board.grid[2][2] != " ":
            return self.current_player
        if self.board.grid[0][2] == self.board.grid[1][1] == self.board.grid[2][0] != " ":
            return self.current_player
        if self.board.is_full():
            return "Tie"
        return None

    def reset(self):
        self.board.clear()
        self.current_player = self.players[0]
```

3. player.py
```python
class Player:
    def __init__(self, name, symbol):
        self.name = name
        self.symbol = symbol
```

4. board.py
```python
class Board:
    def __init__(self):
        self.grid = [[" ", " ", " "], [" ", " ", " "], [" ", " ", " "]]

    def clear(self):
        self.grid = [[" ", " ", " "], [" ", " ", " "], [" ", " ", " "]]

    def display(self):
        print("   0 1 2")
        for i in range(3):
            print(f"{i}  {self.grid[i][0]}|{self.grid[i][1]}|{self.grid[i][2]}")
            if i < 2:
                print("   -+-+-")

    def update(self, row, col, symbol):
        self.grid[row][col] = symbol

    def is_full(self):
        for row in self.grid:
            if " " in row:
                return False
        return True
```

5. gui.py
```python
import tkinter as tk
from tkinter import messagebox

class GUI:
    def __init__(self, game):
        self.game = game
        self.window = tk.Tk()
        self.window.title("Naughts and Crosses")
        self.window.resizable(False, False)
        self.board_buttons = [[None for _ in range(3)] for _ in range(3)]
        self.create_widgets()

    def create_widgets(self):
        self.board_frame = tk.Frame(self.window)
        self.board_frame.pack(padx=10, pady=10)
        for i in range(3):
            for j in range(3):
                button = tk.Button(self.board_frame, text="", font=("Arial", 24), width=2, height=1,
                                   command=lambda row=i, col=j: self.on_board_button_click(row, col))
                button.grid(row=i, column=j, padx=5, pady=5)
                self.board_buttons[i][j] = button

        self.status_label = tk.Label(self.window, text="Player 1's turn", font=("Arial", 16))
        self.status_label.pack(pady=10)

        self.reset_button = tk.Button(self.window, text="Reset", font=("Arial", 16), command=self.on_reset_button_click)
        self.reset_button.pack(pady=10)

    def run(self):
        self.window.mainloop()

    def on_board_button_click(self, row, col):
        winner = self.game.make_move(row, col)
        if winner:
            self.show_winner_message(winner)
        else:
            self.update_board()

    def on_reset_button_click(self):
        self.game.reset()
        self.update_board()

    def update_board(self):
        for i in range(3):
            for j in range(3):
                self.board_buttons[i][j].configure(text=self.game.board.grid[i][j])
        self.status_label.configure(text=f"{self.game.current_player.name}'s turn")

    def show_winner_message(self, winner):
        if winner == "Tie":
            messagebox.showinfo("Game Over", "It's a tie!")
        else:
            messagebox.showinfo("Game Over", f"{winner.name} wins!")
        self.game.reset()
        self.update_board()
```